@page "/todo/create-or-edit/{id:guid?}"
@using Todo.Application.Dtos
@using Todo.Application.Interfaces

@rendermode InteractiveServer

@inject ITodoService _todoService;
@inject NavigationManager _navigation;

<style>
    textarea {
    resize: none;
    }
</style>


<PageTitle>@Title</PageTitle>



<div class="mt-4 p-3 bg-light border shadow-lg text-center text-dark rounded mb-4">
    <span class="mb-3 align-middle fs-3">@TextoAcao Tarefa</span>
</div>

<div class="row">
    <div class="col-12 col-md-8 mx-auto">
        <EditForm class="border p-5 shadow" Model="Todo" FormName="frmCadastroTarefa" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label for="exampleFormControlInput1" class="form-label">Data</label>
                <input type="date" @bind-value="Todo.Data" class="form-control">
                <ValidationMessage For="@(() => Todo.Data)" />
            </div>
            <div class="mb-3">
                <label class="form-label">Título</label>
                <input type="text" @bind-value="Todo.Title" class="form-control" />
                <ValidationMessage For="@(() => Todo.Title)" />
            </div>
            <div class="mb-3">
                <label class="form-label">Descrição</label>
                <textarea class="form-control" @bind="Todo.Description" rows="4"></textarea>
                <ValidationMessage For="@(() => Todo.Description)" />
            </div>
            <div class="form-check mb-4">
                <input class="form-check-input" @bind="Todo.Done" type="checkbox">
                <label class="form-check-label" for="flexCheckDefault">
                    Concluído
                </label>
            </div>
            <div class="d-flex gap-3 align-items-center justify-content-center">
                <button class="btn btn-success">@TextoAcao</button>
                <a class="btn btn-outline-dark" href="/">Cancelar</a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public Guid Id { get; set; }

    private TodoDto Todo = new();

    private string TextoAcao = "Cadastrar";

    private string Title = "Cadastro de Tarefa";

    protected override async Task OnInitializedAsync()
    {
        if (Id != Guid.Empty)
        {
            Todo = await _todoService.GetByIdAsync(Id);
            TextoAcao = "Atualizar";
            Title = "Atualização de Tarefa";
        }
    }

    private async void HandleSubmit()
    {
        if(Id != Guid.Empty)
        {
            var response = await _todoService.UpdateAsync(Todo);
            if (response != null)
                _navigation.NavigateTo("/");
        }
        else{
            var response = await _todoService.CreateAsync(Todo);
            if (response != null)
                _navigation.NavigateTo("/");
        }
    }
}
